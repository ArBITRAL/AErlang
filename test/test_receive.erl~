-module(test_AbC).
-compile({parse_transform,aerl_trans}).

-compile(export_all).
-define(NUM_PROCS, 3).

start() ->
    aerlang:start(),
    io:format("Create Sending Processes~n"),
    Pids = create_process(?NUM_PROCS,[]),
    io:format("All Procs ~p~n",[Pids]),
    timer:sleep(1000),
    Predicate = "X < 5",
    io:format("Create Receiving Process, with Predicate ~p~n",[Predicate]),
    Pid = spawn(fun() ->
			receiver(Predicate) end),


    io:format("Start sending ...~n"),
    Id = ?NUM_PROCS * 2,
    Msg = {start_send, Id},
    [Pid || Pid <- Pids, (Pid ! Msg) =:= Msg],
    timer:sleep(2000),
    io:format("sending again ...~n"),
    Id = ?NUM_PROCS * 2,
    Msg = {start_send, Id},
    [Pid || Pid <- Pids, (Pid ! Msg) =:= Msg],

    io:format("Kill all processes ...~n"),
    lists:foreach(fun(Pid) -> exit(Pid, normal) end, Pids).

create_process(0,Pids) ->
    Pids;
create_process(Num,Pids) ->
    Pid = spawn(fun() ->
			sender(Num) end),
    create_process(Num-1,[Pid | Pids]).

% sender code
sender(Key) ->
    Env = env_init(Key),
    aerlang:register(Key,Env),
    io:format("~p has ~p~n",[self(),aerlang:get_env_by_key(Key)]),
    loop1().

loop1() ->
    receive
	{start_send, Id} ->
	    to("Id = 6") ! {attribute_send, self()},
	    loop1()
    end.


% receiver code
receiver(Predicate) ->
    Key = ?NUM_PROCS * 2,
    Env = env_init(Key),
    aerlang:register(Key,Env),
    io:format("~p has ~p~n",[self(),aerlang:get_env_by_key(Key)]),
    loop2(Predicate).

loop2(Predicate) ->
    from(Predicate),
    receive
	{attribute_send, From} ->
	    io:format("~p receives from ~p whose environment is ~p~n",[self(),From,aerlang:get_env_by_pid(From)]),
	     loop2(Predicate);
	 Other ->
	    io:format("~p receives ~p~n",[self(),Other])
end.

env_init(Id) ->
    <<A:32, B:32, C:32>> = crypto:rand_bytes(12),
    random:seed(A,B,C),
    X = random:uniform(10),
    Y = random:uniform(10),
    [{'Id',Id},{'X',X},{'Y',Y}].


%env_init(Id) ->
%    L1 = [red, green, blue, black],
%    L2 = [explorer, rescue, charger, helping],
%    [{'Id', Id}, {'Color', random_element(L1)}, {'Role', random_element(L2)}, {'Battery', random:uniform(100)}].

%random_element(L) ->
%    Index = random:uniform(length(L)),
%    lists:nth(Index,L).
